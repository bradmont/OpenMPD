package net.bradmont.openmpd.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import net.bradmont.openmpd.dao.ContactStatus;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CONTACT_STATUS".
*/
public class ContactStatusDao extends AbstractDao<ContactStatus, Long> {

    public static final String TABLENAME = "CONTACT_STATUS";

    /**
     * Properties of entity ContactStatus.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ContactId = new Property(1, Long.class, "contactId", false, "CONTACT_ID");
        public final static Property Type = new Property(2, String.class, "type", false, "TYPE");
        public final static Property Status = new Property(3, String.class, "status", false, "STATUS");
        public final static Property LastGift = new Property(4, String.class, "lastGift", false, "LAST_GIFT");
        public final static Property GivingAmount = new Property(5, Long.class, "givingAmount", false, "GIVING_AMOUNT");
        public final static Property GivingFrequency = new Property(6, Integer.class, "givingFrequency", false, "GIVING_FREQUENCY");
        public final static Property LastNotify = new Property(7, java.util.Date.class, "lastNotify", false, "LAST_NOTIFY");
        public final static Property ManualSetExpires = new Property(8, java.util.Date.class, "manualSetExpires", false, "MANUAL_SET_EXPIRES");
    };

    private DaoSession daoSession;

    private Query<ContactStatus> contact_StatusQuery;

    public ContactStatusDao(DaoConfig config) {
        super(config);
    }
    
    public ContactStatusDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CONTACT_STATUS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"CONTACT_ID\" INTEGER," + // 1: contactId
                "\"TYPE\" TEXT," + // 2: type
                "\"STATUS\" TEXT," + // 3: status
                "\"LAST_GIFT\" TEXT," + // 4: lastGift
                "\"GIVING_AMOUNT\" INTEGER," + // 5: givingAmount
                "\"GIVING_FREQUENCY\" INTEGER," + // 6: givingFrequency
                "\"LAST_NOTIFY\" INTEGER," + // 7: lastNotify
                "\"MANUAL_SET_EXPIRES\" INTEGER);"); // 8: manualSetExpires
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_CONTACT_STATUS_CONTACT_ID ON CONTACT_STATUS" +
                " (\"CONTACT_ID\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CONTACT_STATUS\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ContactStatus entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long contactId = entity.getContactId();
        if (contactId != null) {
            stmt.bindLong(2, contactId);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(3, type);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(4, status);
        }
 
        String lastGift = entity.getLastGift();
        if (lastGift != null) {
            stmt.bindString(5, lastGift);
        }
 
        Long givingAmount = entity.getGivingAmount();
        if (givingAmount != null) {
            stmt.bindLong(6, givingAmount);
        }
 
        Integer givingFrequency = entity.getGivingFrequency();
        if (givingFrequency != null) {
            stmt.bindLong(7, givingFrequency);
        }
 
        java.util.Date lastNotify = entity.getLastNotify();
        if (lastNotify != null) {
            stmt.bindLong(8, lastNotify.getTime());
        }
 
        java.util.Date manualSetExpires = entity.getManualSetExpires();
        if (manualSetExpires != null) {
            stmt.bindLong(9, manualSetExpires.getTime());
        }
    }

    @Override
    protected void attachEntity(ContactStatus entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ContactStatus readEntity(Cursor cursor, int offset) {
        ContactStatus entity = new ContactStatus( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // contactId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // type
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // status
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // lastGift
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // givingAmount
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // givingFrequency
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)), // lastNotify
            cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)) // manualSetExpires
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ContactStatus entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setContactId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStatus(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLastGift(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setGivingAmount(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setGivingFrequency(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setLastNotify(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
        entity.setManualSetExpires(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ContactStatus entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ContactStatus entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "status" to-many relationship of Contact. */
    public List<ContactStatus> _queryContact_Status(Long contactId) {
        synchronized (this) {
            if (contact_StatusQuery == null) {
                QueryBuilder<ContactStatus> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ContactId.eq(null));
                contact_StatusQuery = queryBuilder.build();
            }
        }
        Query<ContactStatus> query = contact_StatusQuery.forCurrentThread();
        query.setParameter(0, contactId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getContactDao().getAllColumns());
            builder.append(" FROM CONTACT_STATUS T");
            builder.append(" LEFT JOIN CONTACT T0 ON T.\"CONTACT_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected ContactStatus loadCurrentDeep(Cursor cursor, boolean lock) {
        ContactStatus entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Contact contact = loadCurrentOther(daoSession.getContactDao(), cursor, offset);
        entity.setContact(contact);

        return entity;    
    }

    public ContactStatus loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<ContactStatus> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<ContactStatus> list = new ArrayList<ContactStatus>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<ContactStatus> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<ContactStatus> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}

    package net.bradmont.openmpd.dao;

    import net.bradmont.openmpd.dao.DaoSession;
    import de.greenrobot.dao.DaoException;

    // THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

    // KEEP INCLUDES - put your custom includes here
    import android.util.Log;
    import android.content.Context;
    import android.content.SharedPreferences;
    import java.util.ArrayList;
    import java.net.URL;
    import org.apache.http.message.*;


    import net.bradmont.openmpd.OpenMPD;
    // KEEP INCLUDES END
    /**
     * Entity mapped to table "SERVICE_ACCOUNT".
     */
    public class ServiceAccount {

        private Long id;
        private Long tntServiceId;
        private String username;
        private String password;
        private java.util.Date lastImport;
        private String identity;

        /** Used to resolve relations */
        private transient DaoSession daoSession;

        /** Used for active entity operations. */
        private transient ServiceAccountDao myDao;

        private TntService tntService;
        private Long tntService__resolvedKey;


        // KEEP FIELDS - put your custom fields here
        // KEEP FIELDS END

        public ServiceAccount() {
        }

        public ServiceAccount(Long id) {
            this.id = id;
        }

        public ServiceAccount(Long id, Long tntServiceId, String username, String password, java.util.Date lastImport, String identity) {
            this.id = id;
            this.tntServiceId = tntServiceId;
            this.username = username;
            this.password = password;
            this.lastImport = lastImport;
            this.identity = identity;
        }

        /** called by internal mechanisms, do not call yourself. */
        public void __setDaoSession(DaoSession daoSession) {
            this.daoSession = daoSession;
            myDao = daoSession != null ? daoSession.getServiceAccountDao() : null;
        }

        public Long getId() {
            return id;
        }

        public void setId(Long id) {
            this.id = id;
        }

        public Long getTntServiceId() {
            return tntServiceId;
        }

        public void setTntServiceId(Long tntServiceId) {
            this.tntServiceId = tntServiceId;
        }

        public String getUsername() {
            return username;
        }

        public void setUsername(String username) {
            this.username = username;
        }

        public String getPassword() {
            return password;
        }

        public void setPassword(String password) {
            this.password = password;
        }

        public java.util.Date getLastImport() {
            return lastImport;
        }

        public void setLastImport(java.util.Date lastImport) {
            this.lastImport = lastImport;
        }

        public String getIdentity() {
            return identity;
        }

        public void setIdentity(String identity) {
            this.identity = identity;
        }

        /** To-one relationship, resolved on first access. */
        public TntService getTntService() {
            Long __key = this.tntServiceId;
            if (tntService__resolvedKey == null || !tntService__resolvedKey.equals(__key)) {
                if (daoSession == null) {
                    throw new DaoException("Entity is detached from DAO context");
                }
                TntServiceDao targetDao = daoSession.getTntServiceDao();
                TntService tntServiceNew = targetDao.load(__key);
                synchronized (this) {
                    tntService = tntServiceNew;
                    tntService__resolvedKey = __key;
                }
            }
            return tntService;
        }

        public void setTntService(TntService tntService) {
            synchronized (this) {
                this.tntService = tntService;
                tntServiceId = tntService == null ? null : tntService.getId();
                tntService__resolvedKey = tntServiceId;
            }
        }

        /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
        public void delete() {
            if (myDao == null) {
                throw new DaoException("Entity is detached from DAO context");
            }    
            myDao.delete(this);
        }

        /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
        public void update() {
            if (myDao == null) {
                throw new DaoException("Entity is detached from DAO context");
            }    
            myDao.update(this);
        }

        /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
        public void refresh() {
            if (myDao == null) {
                throw new DaoException("Entity is detached from DAO context");
            }    
            myDao.refresh(this);
        }

        // KEEP METHODS - put your custom methods here
        
        /**
         * returns account balance in cents
         */
        public int getBalance() throws TntService.ServerException{
            ArrayList<BasicNameValuePair> arguments = new ArrayList<BasicNameValuePair>(4);
            return getTntService().getBalance( getUsername(), getPassword());
        }

        /**
         * Execute the Addresses TNT query to download contacts.
         */
        public ArrayList<String> getAddresses() throws TntService.ServerException{
            return getTntService().getAddresses(getUsername(), getPassword());
        }

        public ArrayList<String> getGifts() throws TntService.ServerException{
            return getTntService().getGifts(getUsername(), getPassword(), getLastImport());
        }

        /**
         * Returns a unique name for this account in the form of username@domain.
         * Used with tnt_people_id in the contact table to avoid collisions from
         * multiple accounts.
         */
        public String getName(){
            return getUsername() + "@" + getTntService().getDomain();
        }

        /**
         * Check if the account is valid
         */
        public boolean verifyAccount(){
            try {
                getBalance();
            } catch (TntService.ServerException e){
                Log.i("net.bradmont.openmpd", "server error");
                return false;
            } catch (RuntimeException e){
                Log.i("net.bradmont.openmpd", "runtime exception");
                URL u = null;
                Log.i("net.bradmont.openmpd", "url");
                try { u = new URL(getTntService().getBalanceUrl()); } catch (Exception f){
                    Log.i("net.bradmont.openmpd", "url exception");
                    Log.i("net.bradmont.openmpd", f.toString());
                }
                if (u.getHost().contains("focus.powertochange.org") ||
                    u.getHost().contains("tntmpd.powertochange.org")){
                    Log.i("net.bradmont.openmpd", "setting ignore ssl for p2c");
                    SharedPreferences.Editor prefs = OpenMPD.get().getSharedPreferences("openmpd", Context.MODE_PRIVATE).edit();
                    prefs.putBoolean("ignore_ssl_" + u.getHost(), true);
                    prefs.commit();
                    try {
                        Log.i("net.bradmont.openmpd", "recalling getBalance");
                        getBalance();
                    } catch (Exception f){
                        return false;
                    }
                } else {
                    Log.i("net.bradmont.openmpd", "unexpected RuntimeException");
                    for (StackTraceElement l : e.getStackTrace()){
                        Log.i("net.bradmont.openmpd", l.toString());
                    }
                    throw e;
                }
            }
            return true;
        }

        // KEEP METHODS END

}

package net.bradmont.openmpd.dao;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;
import de.greenrobot.dao.AbstractDaoMaster;
import de.greenrobot.dao.identityscope.IdentityScopeType;

import net.bradmont.openmpd.dao.ContactDao;
import net.bradmont.openmpd.dao.PersonDao;
import net.bradmont.openmpd.dao.ContactDetailDao;
import net.bradmont.openmpd.dao.ContactInteractionDao;
import net.bradmont.openmpd.dao.ContactStatusDao;
import net.bradmont.openmpd.dao.GiftDao;
import net.bradmont.openmpd.dao.NotificationDao;
import net.bradmont.openmpd.dao.TntServiceDao;
import net.bradmont.openmpd.dao.ServiceAccountDao;
import net.bradmont.openmpd.dao.QuickMessageDao;
import net.bradmont.openmpd.dao.GivingSummaryCacheDao;
import net.bradmont.openmpd.dao.LogDao;
import net.bradmont.openmpd.dao.ContactSublistDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * Master of DAO (schema version 2): knows all DAOs.
*/
public class DaoMaster extends AbstractDaoMaster {
    public static final int SCHEMA_VERSION = 2;

    /** Creates underlying database table using DAOs. */
    public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
        ContactDao.createTable(db, ifNotExists);
        PersonDao.createTable(db, ifNotExists);
        ContactDetailDao.createTable(db, ifNotExists);
        ContactInteractionDao.createTable(db, ifNotExists);
        ContactStatusDao.createTable(db, ifNotExists);
        GiftDao.createTable(db, ifNotExists);
        NotificationDao.createTable(db, ifNotExists);
        TntServiceDao.createTable(db, ifNotExists);
        ServiceAccountDao.createTable(db, ifNotExists);
        QuickMessageDao.createTable(db, ifNotExists);
        GivingSummaryCacheDao.createTable(db, ifNotExists);
        LogDao.createTable(db, ifNotExists);
        ContactSublistDao.createTable(db, ifNotExists);
    }
    
    /** Drops underlying database table using DAOs. */
    public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
        ContactDao.dropTable(db, ifExists);
        PersonDao.dropTable(db, ifExists);
        ContactDetailDao.dropTable(db, ifExists);
        ContactInteractionDao.dropTable(db, ifExists);
        ContactStatusDao.dropTable(db, ifExists);
        GiftDao.dropTable(db, ifExists);
        NotificationDao.dropTable(db, ifExists);
        TntServiceDao.dropTable(db, ifExists);
        ServiceAccountDao.dropTable(db, ifExists);
        QuickMessageDao.dropTable(db, ifExists);
        GivingSummaryCacheDao.dropTable(db, ifExists);
        LogDao.dropTable(db, ifExists);
        ContactSublistDao.dropTable(db, ifExists);
    }
    
    public static abstract class OpenHelper extends SQLiteOpenHelper {

        public OpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory, SCHEMA_VERSION);
        }

        @Override
        public void onCreate(SQLiteDatabase db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false);
        }
    }
    
    /** WARNING: Drops all table on Upgrade! Use only during development. */
    public static class DevOpenHelper extends OpenHelper {
        public DevOpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory);
        }

        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
            dropAllTables(db, true);
            onCreate(db);
        }
    }

    public DaoMaster(SQLiteDatabase db) {
        super(db, SCHEMA_VERSION);
        registerDaoClass(ContactDao.class);
        registerDaoClass(PersonDao.class);
        registerDaoClass(ContactDetailDao.class);
        registerDaoClass(ContactInteractionDao.class);
        registerDaoClass(ContactStatusDao.class);
        registerDaoClass(GiftDao.class);
        registerDaoClass(NotificationDao.class);
        registerDaoClass(TntServiceDao.class);
        registerDaoClass(ServiceAccountDao.class);
        registerDaoClass(QuickMessageDao.class);
        registerDaoClass(GivingSummaryCacheDao.class);
        registerDaoClass(LogDao.class);
        registerDaoClass(ContactSublistDao.class);
    }
    
    public DaoSession newSession() {
        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
    }
    
    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(db, type, daoConfigMap);
    }
    
}

package net.bradmont.openmpd.dao;

import java.util.List;
import net.bradmont.openmpd.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "CONTACT".
 */
public class Contact {

    private Long id;
    private String tntPeopleId;
    private String uuid;
    private String tntAccountName;
    private String tntPersonType;
    private Boolean isSubcontact;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ContactDao myDao;

    private List<Person> people;
    private List<ContactDetail> details;
    private List<ContactInteraction> interactions;
    private List<ContactStatus> status;
    private List<Gift> gifts;
    private List<Notification> notifications;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Contact() {
    }

    public Contact(Long id) {
        this.id = id;
    }

    public Contact(Long id, String tntPeopleId, String uuid, String tntAccountName, String tntPersonType, Boolean isSubcontact) {
        this.id = id;
        this.tntPeopleId = tntPeopleId;
        this.uuid = uuid;
        this.tntAccountName = tntAccountName;
        this.tntPersonType = tntPersonType;
        this.isSubcontact = isSubcontact;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getContactDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getTntPeopleId() {
        return tntPeopleId;
    }

    public void setTntPeopleId(String tntPeopleId) {
        this.tntPeopleId = tntPeopleId;
    }

    public String getUuid() {
        return uuid;
    }

    public void setUuid(String uuid) {
        this.uuid = uuid;
    }

    public String getTntAccountName() {
        return tntAccountName;
    }

    public void setTntAccountName(String tntAccountName) {
        this.tntAccountName = tntAccountName;
    }

    public String getTntPersonType() {
        return tntPersonType;
    }

    public void setTntPersonType(String tntPersonType) {
        this.tntPersonType = tntPersonType;
    }

    public Boolean getIsSubcontact() {
        return isSubcontact;
    }

    public void setIsSubcontact(Boolean isSubcontact) {
        this.isSubcontact = isSubcontact;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Person> getPeople() {
        if (people == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PersonDao targetDao = daoSession.getPersonDao();
            List<Person> peopleNew = targetDao._queryContact_People(id);
            synchronized (this) {
                if(people == null) {
                    people = peopleNew;
                }
            }
        }
        return people;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetPeople() {
        people = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<ContactDetail> getDetails() {
        if (details == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ContactDetailDao targetDao = daoSession.getContactDetailDao();
            List<ContactDetail> detailsNew = targetDao._queryContact_Details(id);
            synchronized (this) {
                if(details == null) {
                    details = detailsNew;
                }
            }
        }
        return details;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetDetails() {
        details = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<ContactInteraction> getInteractions() {
        if (interactions == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ContactInteractionDao targetDao = daoSession.getContactInteractionDao();
            List<ContactInteraction> interactionsNew = targetDao._queryContact_Interactions(id);
            synchronized (this) {
                if(interactions == null) {
                    interactions = interactionsNew;
                }
            }
        }
        return interactions;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetInteractions() {
        interactions = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<ContactStatus> getStatus() {
        if (status == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ContactStatusDao targetDao = daoSession.getContactStatusDao();
            List<ContactStatus> statusNew = targetDao._queryContact_Status(id);
            synchronized (this) {
                if(status == null) {
                    status = statusNew;
                }
            }
        }
        return status;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetStatus() {
        status = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Gift> getGifts() {
        if (gifts == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            GiftDao targetDao = daoSession.getGiftDao();
            List<Gift> giftsNew = targetDao._queryContact_Gifts(id);
            synchronized (this) {
                if(gifts == null) {
                    gifts = giftsNew;
                }
            }
        }
        return gifts;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetGifts() {
        gifts = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Notification> getNotifications() {
        if (notifications == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            NotificationDao targetDao = daoSession.getNotificationDao();
            List<Notification> notificationsNew = targetDao._queryContact_Notifications(id);
            synchronized (this) {
                if(notifications == null) {
                    notifications = notificationsNew;
                }
            }
        }
        return notifications;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetNotifications() {
        notifications = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    
    /*
     * Get the primary Person associatded with this Contact.
     */
    public Person getPrimaryPersion(){
        QueryBuilder qb = OpenMPD.getDaoSession().getPersonDao().queryBuilder();
        qb.and(Properties.ContactId.eq(getId()),
               Properties.IsContactPrimary.eq(true)
                );
        List<Person> results = qb.list();
        if (list.size() > 0){
            return list.get(0);
        }
        return null;
    }

    /**
     * Get the TNT spouse Person associated with this Contact
     */
    public Person getTntSpouse(){
        QueryBuilder qb = OpenMPD.getDaoSession().getPersonDao().queryBuilder();
        qb.and(Properties.ContactId.eq(getId()),
               Properties.IsTntSpouse.eq(true)
                );
        List<Person> results = qb.list();
        if (list.size() > 0){
            return list.get(0);
        }
        return null;
    }

    /**
     * Retrieve phone number created from TNT import, or new
     */
    public ContactDetail getTntPhoneOrNew(){
        QueryBuilder qb = OpenMPD.getDaoSession().getContactDetailDao().queryBuilder();
        qb.and(Properties.ContactId.eq(getId()),
               Properties.Type.eq("phone"),
               Properties.FromTnt.eq(true);
                );
        List<ContactDetail> results = qb.list();
        if (list.size() > 0){
            return list.get(0);
        }
        ContactDetail n = new ContactDetail();
        n.setType("phone");
        return n;
    }
    /**
     * Retrieve phone number email from TNT import, or new
     */
    public ContactDetail getTntEmailOrNew(){
        QueryBuilder qb = OpenMPD.getDaoSession().getContactDetailDao().queryBuilder();
        qb.and(Properties.ContactId.eq(getId()),
               Properties.Type.eq("email"),
               Properties.FromTnt.eq(true);
                );
        List<ContactDetail> results = qb.list();
        if (list.size() > 0){
            return list.get(0);
        }
        ContactDetail n = new ContactDetail();
        n.setType("email");
        return n;
    }
    /**
     * Retrieve phone number address from TNT import, or new
     */
    public ContactDetail getTntAddressOrNew(){
        QueryBuilder qb = OpenMPD.getDaoSession().getContactDetailDao().queryBuilder();
        qb.and(Properties.ContactId.eq(getId()),
               Properties.Type.eq("address"),
               Properties.FromTnt.eq(true);
                );
        List<ContactDetail> results = qb.list();
        if (list.size() > 0){
            return list.get(0);
        }
        ContactDetail n = new ContactDetail();
        n.setType("address");
        return n;
    }

    // KEEP METHODS END

}

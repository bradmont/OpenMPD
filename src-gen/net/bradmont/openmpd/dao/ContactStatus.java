package net.bradmont.openmpd.dao;

import net.bradmont.openmpd.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "CONTACT_STATUS".
 */
public class ContactStatus {

    private Long id;
    private Long contactId;
    private String type;
    private String status;
    private java.util.Date lastGift;
    private Long givingAmount;
    private Integer givingFrequency;
    private java.util.Date lastNotify;
    private java.util.Date manualSetExpires;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ContactStatusDao myDao;

    private Contact contact;
    private Long contact__resolvedKey;


    public ContactStatus() {
    }

    public ContactStatus(Long id) {
        this.id = id;
    }

    public ContactStatus(Long id, Long contactId, String type, String status, java.util.Date lastGift, Long givingAmount, Integer givingFrequency, java.util.Date lastNotify, java.util.Date manualSetExpires) {
        this.id = id;
        this.contactId = contactId;
        this.type = type;
        this.status = status;
        this.lastGift = lastGift;
        this.givingAmount = givingAmount;
        this.givingFrequency = givingFrequency;
        this.lastNotify = lastNotify;
        this.manualSetExpires = manualSetExpires;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getContactStatusDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getContactId() {
        return contactId;
    }

    public void setContactId(Long contactId) {
        this.contactId = contactId;
    }

    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
    }

    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    public java.util.Date getLastGift() {
        return lastGift;
    }

    public void setLastGift(java.util.Date lastGift) {
        this.lastGift = lastGift;
    }

    public Long getGivingAmount() {
        return givingAmount;
    }

    public void setGivingAmount(Long givingAmount) {
        this.givingAmount = givingAmount;
    }

    public Integer getGivingFrequency() {
        return givingFrequency;
    }

    public void setGivingFrequency(Integer givingFrequency) {
        this.givingFrequency = givingFrequency;
    }

    public java.util.Date getLastNotify() {
        return lastNotify;
    }

    public void setLastNotify(java.util.Date lastNotify) {
        this.lastNotify = lastNotify;
    }

    public java.util.Date getManualSetExpires() {
        return manualSetExpires;
    }

    public void setManualSetExpires(java.util.Date manualSetExpires) {
        this.manualSetExpires = manualSetExpires;
    }

    /** To-one relationship, resolved on first access. */
    public Contact getContact() {
        Long __key = this.contactId;
        if (contact__resolvedKey == null || !contact__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ContactDao targetDao = daoSession.getContactDao();
            Contact contactNew = targetDao.load(__key);
            synchronized (this) {
                contact = contactNew;
            	contact__resolvedKey = __key;
            }
        }
        return contact;
    }

    public void setContact(Contact contact) {
        synchronized (this) {
            this.contact = contact;
            contactId = contact == null ? null : contact.getId();
            contact__resolvedKey = contactId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}

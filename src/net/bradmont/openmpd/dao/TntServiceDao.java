package net.bradmont.openmpd.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import net.bradmont.openmpd.dao.TntService;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TNT_SERVICE".
*/
public class TntServiceDao extends AbstractDao<TntService, Long> {

    public static final String TABLENAME = "TNT_SERVICE";

    /**
     * Properties of entity TntService.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property NameShort = new Property(2, String.class, "nameShort", false, "NAME_SHORT");
        public final static Property Domain = new Property(3, String.class, "domain", false, "DOMAIN");
        public final static Property HttpAuth = new Property(4, Boolean.class, "httpAuth", false, "HTTP_AUTH");
        public final static Property BalanceUrl = new Property(5, String.class, "balanceUrl", false, "BALANCE_URL");
        public final static Property BalanceFormdata = new Property(6, String.class, "balanceFormdata", false, "BALANCE_FORMDATA");
        public final static Property DonationsUrl = new Property(7, String.class, "donationsUrl", false, "DONATIONS_URL");
        public final static Property DonationsFormdata = new Property(8, String.class, "donationsFormdata", false, "DONATIONS_FORMDATA");
        public final static Property AddressesUrl = new Property(9, String.class, "addressesUrl", false, "ADDRESSES_URL");
        public final static Property AddressesFormdata = new Property(10, String.class, "addressesFormdata", false, "ADDRESSES_FORMDATA");
        public final static Property AddressesByPersonidsUrl = new Property(11, String.class, "addressesByPersonidsUrl", false, "ADDRESSES_BY_PERSONIDS_URL");
        public final static Property AddressesByPersonidsFormdata = new Property(12, String.class, "addressesByPersonidsFormdata", false, "ADDRESSES_BY_PERSONIDS_FORMDATA");
        public final static Property QueryIniUrl = new Property(13, String.class, "queryIniUrl", false, "QUERY_INI_URL");
    };


    public TntServiceDao(DaoConfig config) {
        super(config);
    }
    
    public TntServiceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TNT_SERVICE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"NAME_SHORT\" TEXT," + // 2: nameShort
                "\"DOMAIN\" TEXT," + // 3: domain
                "\"HTTP_AUTH\" INTEGER," + // 4: httpAuth
                "\"BALANCE_URL\" TEXT," + // 5: balanceUrl
                "\"BALANCE_FORMDATA\" TEXT," + // 6: balanceFormdata
                "\"DONATIONS_URL\" TEXT," + // 7: donationsUrl
                "\"DONATIONS_FORMDATA\" TEXT," + // 8: donationsFormdata
                "\"ADDRESSES_URL\" TEXT," + // 9: addressesUrl
                "\"ADDRESSES_FORMDATA\" TEXT," + // 10: addressesFormdata
                "\"ADDRESSES_BY_PERSONIDS_URL\" TEXT," + // 11: addressesByPersonidsUrl
                "\"ADDRESSES_BY_PERSONIDS_FORMDATA\" TEXT," + // 12: addressesByPersonidsFormdata
                "\"QUERY_INI_URL\" TEXT);"); // 13: queryIniUrl
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TNT_SERVICE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TntService entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String nameShort = entity.getNameShort();
        if (nameShort != null) {
            stmt.bindString(3, nameShort);
        }
 
        String domain = entity.getDomain();
        if (domain != null) {
            stmt.bindString(4, domain);
        }
 
        Boolean httpAuth = entity.getHttpAuth();
        if (httpAuth != null) {
            stmt.bindLong(5, httpAuth ? 1L: 0L);
        }
 
        String balanceUrl = entity.getBalanceUrl();
        if (balanceUrl != null) {
            stmt.bindString(6, balanceUrl);
        }
 
        String balanceFormdata = entity.getBalanceFormdata();
        if (balanceFormdata != null) {
            stmt.bindString(7, balanceFormdata);
        }
 
        String donationsUrl = entity.getDonationsUrl();
        if (donationsUrl != null) {
            stmt.bindString(8, donationsUrl);
        }
 
        String donationsFormdata = entity.getDonationsFormdata();
        if (donationsFormdata != null) {
            stmt.bindString(9, donationsFormdata);
        }
 
        String addressesUrl = entity.getAddressesUrl();
        if (addressesUrl != null) {
            stmt.bindString(10, addressesUrl);
        }
 
        String addressesFormdata = entity.getAddressesFormdata();
        if (addressesFormdata != null) {
            stmt.bindString(11, addressesFormdata);
        }
 
        String addressesByPersonidsUrl = entity.getAddressesByPersonidsUrl();
        if (addressesByPersonidsUrl != null) {
            stmt.bindString(12, addressesByPersonidsUrl);
        }
 
        String addressesByPersonidsFormdata = entity.getAddressesByPersonidsFormdata();
        if (addressesByPersonidsFormdata != null) {
            stmt.bindString(13, addressesByPersonidsFormdata);
        }
 
        String queryIniUrl = entity.getQueryIniUrl();
        if (queryIniUrl != null) {
            stmt.bindString(14, queryIniUrl);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TntService readEntity(Cursor cursor, int offset) {
        TntService entity = new TntService( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // nameShort
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // domain
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0, // httpAuth
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // balanceUrl
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // balanceFormdata
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // donationsUrl
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // donationsFormdata
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // addressesUrl
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // addressesFormdata
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // addressesByPersonidsUrl
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // addressesByPersonidsFormdata
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // queryIniUrl
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TntService entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNameShort(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDomain(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setHttpAuth(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
        entity.setBalanceUrl(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setBalanceFormdata(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDonationsUrl(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDonationsFormdata(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setAddressesUrl(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setAddressesFormdata(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setAddressesByPersonidsUrl(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setAddressesByPersonidsFormdata(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setQueryIniUrl(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TntService entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(TntService entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}

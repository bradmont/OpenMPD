package net.bradmont.openmpd.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import net.bradmont.openmpd.dao.Person;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PERSON".
*/
public class PersonDao extends AbstractDao<Person, Long> {

    public static final String TABLENAME = "PERSON";

    /**
     * Properties of entity Person.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property IsContactPrimary = new Property(1, Boolean.class, "isContactPrimary", false, "IS_CONTACT_PRIMARY");
        public final static Property IsTntSpouse = new Property(2, Boolean.class, "isTntSpouse", false, "IS_TNT_SPOUSE");
        public final static Property Lname = new Property(3, String.class, "lname", false, "LNAME");
        public final static Property Fname = new Property(4, String.class, "fname", false, "FNAME");
        public final static Property Mname = new Property(5, String.class, "mname", false, "MNAME");
        public final static Property Title = new Property(6, String.class, "title", false, "TITLE");
        public final static Property Suffix = new Property(7, String.class, "suffix", false, "SUFFIX");
        public final static Property ContactId = new Property(8, Long.class, "contactId", false, "CONTACT_ID");
    };

    private DaoSession daoSession;

    private Query<Person> contact_PeopleQuery;

    public PersonDao(DaoConfig config) {
        super(config);
    }
    
    public PersonDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PERSON\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"IS_CONTACT_PRIMARY\" INTEGER," + // 1: isContactPrimary
                "\"IS_TNT_SPOUSE\" INTEGER," + // 2: isTntSpouse
                "\"LNAME\" TEXT," + // 3: lname
                "\"FNAME\" TEXT," + // 4: fname
                "\"MNAME\" TEXT," + // 5: mname
                "\"TITLE\" TEXT," + // 6: title
                "\"SUFFIX\" TEXT," + // 7: suffix
                "\"CONTACT_ID\" INTEGER);"); // 8: contactId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PERSON\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Person entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Boolean isContactPrimary = entity.getIsContactPrimary();
        if (isContactPrimary != null) {
            stmt.bindLong(2, isContactPrimary ? 1L: 0L);
        }
 
        Boolean isTntSpouse = entity.getIsTntSpouse();
        if (isTntSpouse != null) {
            stmt.bindLong(3, isTntSpouse ? 1L: 0L);
        }
 
        String lname = entity.getLname();
        if (lname != null) {
            stmt.bindString(4, lname);
        }
 
        String fname = entity.getFname();
        if (fname != null) {
            stmt.bindString(5, fname);
        }
 
        String mname = entity.getMname();
        if (mname != null) {
            stmt.bindString(6, mname);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(7, title);
        }
 
        String suffix = entity.getSuffix();
        if (suffix != null) {
            stmt.bindString(8, suffix);
        }
 
        Long contactId = entity.getContactId();
        if (contactId != null) {
            stmt.bindLong(9, contactId);
        }
    }

    @Override
    protected void attachEntity(Person entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Person readEntity(Cursor cursor, int offset) {
        Person entity = new Person( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getShort(offset + 1) != 0, // isContactPrimary
            cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0, // isTntSpouse
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // lname
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // fname
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // mname
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // title
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // suffix
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8) // contactId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Person entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIsContactPrimary(cursor.isNull(offset + 1) ? null : cursor.getShort(offset + 1) != 0);
        entity.setIsTntSpouse(cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0);
        entity.setLname(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFname(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMname(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTitle(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSuffix(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setContactId(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Person entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Person entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "people" to-many relationship of Contact. */
    public List<Person> _queryContact_People(Long contactId) {
        synchronized (this) {
            if (contact_PeopleQuery == null) {
                QueryBuilder<Person> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ContactId.eq(null));
                contact_PeopleQuery = queryBuilder.build();
            }
        }
        Query<Person> query = contact_PeopleQuery.forCurrentThread();
        query.setParameter(0, contactId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getContactDao().getAllColumns());
            builder.append(" FROM PERSON T");
            builder.append(" LEFT JOIN CONTACT T0 ON T.\"CONTACT_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Person loadCurrentDeep(Cursor cursor, boolean lock) {
        Person entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Contact contact = loadCurrentOther(daoSession.getContactDao(), cursor, offset);
        entity.setContact(contact);

        return entity;    
    }

    public Person loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Person> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Person> list = new ArrayList<Person>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Person> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Person> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}

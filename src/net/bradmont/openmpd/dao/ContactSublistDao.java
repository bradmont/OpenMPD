package net.bradmont.openmpd.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import net.bradmont.openmpd.dao.ContactSublist;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CONTACT_SUBLIST".
*/
public class ContactSublistDao extends AbstractDao<ContactSublist, Long> {

    public static final String TABLENAME = "CONTACT_SUBLIST";

    /**
     * Properties of entity ContactSublist.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TntPeopleId = new Property(1, String.class, "tntPeopleId", false, "TNT_PEOPLE_ID");
        public final static Property ListName = new Property(2, String.class, "listName", false, "LIST_NAME");
    };


    public ContactSublistDao(DaoConfig config) {
        super(config);
    }
    
    public ContactSublistDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CONTACT_SUBLIST\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TNT_PEOPLE_ID\" TEXT," + // 1: tntPeopleId
                "\"LIST_NAME\" TEXT);"); // 2: listName
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_CONTACT_SUBLIST_TNT_PEOPLE_ID_LIST_NAME ON CONTACT_SUBLIST" +
                " (\"TNT_PEOPLE_ID\",\"LIST_NAME\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CONTACT_SUBLIST\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ContactSublist entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String tntPeopleId = entity.getTntPeopleId();
        if (tntPeopleId != null) {
            stmt.bindString(2, tntPeopleId);
        }
 
        String listName = entity.getListName();
        if (listName != null) {
            stmt.bindString(3, listName);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ContactSublist readEntity(Cursor cursor, int offset) {
        ContactSublist entity = new ContactSublist( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // tntPeopleId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // listName
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ContactSublist entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTntPeopleId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setListName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ContactSublist entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ContactSublist entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
